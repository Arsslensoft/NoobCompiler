COMPILER programmes

//---------- LL(1) conflict resolvers ------------------------------

CHARACTERS
	letter     = 'A'..'Z' + 'a'..'z'.
	digit      = '0'..'9'.

	tab        = '\t'.
	cr         = '\r'.
	lf         = '\n'.
	newLine    = cr + lf.
	notNewLine = ANY - newLine .
	ws         = " " + tab + '\u000b' + '\u000c'.


TOKENS
	ident    = letter {letter | digit}.
	nb   = digit {digit}.


	// tokens defined in order to get their names for LL(1) conflict resolvers
	prog      = "prog".
	var      = "var".
	int      = "int".
	func     = "func".
	proc   = "proc".
	if    = "if".
	then      = "then".
	else    = "else".
	while     = "while".
	do       = "do".
	and = "and".
	mod = "mod".
	div = "div".
	or = "or".
	not = "not".
	comma     = ','.
	semicolon = ';'.
	colon     = ':'.
	star      = '*'.
	lpar      = '('.
	rpar      = ')'.
	lbrack    = '['.
	rbrace    = '}'.
	dot = '.'.
	plus = '+'.
	minus = '-'.
	lbrace = '{'.
	rbrack = ']'.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE tab + cr + lf

PRODUCTIONS

programmes = prog ident semicolon declaration block_stmt dot.

declaration = (variable_declarations | ) method_declarations.
variable_declarations = variable_declaration ( | variable_declarations).
variable_declaration = var ident_list ':' int ';' .
ident_list = ident ( | ',' ident_list).

method_declarations = method_declaration ';' ( | method_declarations).
method_declaration = method_header (variable_declarations | ) block_stmt.
method_header = func ident ( '(' parameter_list ')' | ) ':' int ';'
                | proc ident  ( '(' parameter_list ')' | ) ';'
                .

parameter_list = parameter ( | ';' parameter_list).
parameter = ident ':' int | var ident ':' int.
block_stmt = '{' ( stmt_list | )  '}'.
stmt_list = stmt ( | ';' stmt_list).
stmt = ident ( | '=' expr  | '(' expr_list')' )
      | block_stmt
      .
expr_list = expr (
                | ',' expr_list
                ).
expr  = simple_expr ( | oprel  simple_expr).

simple_expr = signe terme
            | terme (
                | signe simple_expr
                | or simple_expr
            )
            .

terme =  facteur (opmul terme | ).

facteur = ident ( |  '(' expr_list')' )
        | nb
        | not facteur
        | '(' expr ')'
        .

signe = '+'
       | '-'
       .

opmul = '/' | '*' | "div" | "mod" | "and".
oprel = "=="
        | "<>"
        | '>'
        | '<'
        | ">="
        | "<="
        .


END programmes.